


FILE(RELATIVE_PATH r ${PROJECT_SOURCE_DIR} ${PROJECT_BINARY_DIR})
STRING(REGEX REPLACE "\\.\\./" "" r ${r})
STRING(REGEX REPLACE "build/" "" r ${r})
STRING(REGEX MATCH "^[A-Za-z0-9]+" m ${r})
SET(LIBRARY_TYPE ${m})
STRING(REGEX REPLACE "^[A-Za-z0-9]+/" "" r ${r})
STRING(REGEX MATCH "^[A-Za-z0-9]+" m ${r})
SET(CMAKE_BUILD_TYPE ${m})

#MESSAGE(STATUS "LIBRARY_TYPE     ${LIBRARY_TYPE}")
#MESSAGE(STATUS "CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE}")

SET(BUILD_TYPES Debug Release)
SET(LIBRARY_TYPES Static Shared)

LIST(FIND BUILD_TYPES ${CMAKE_BUILD_TYPE} FIND_BUILD_TYPE)
LIST(FIND LIBRARY_TYPES ${LIBRARY_TYPE} FIND_LIBRARY_TYPE)

#MESSAGE(STATUS "LIBRARY_TYPE     ${FIND_LIBRARY_TYPE}")
#MESSAGE(STATUS "CMAKE_BUILD_TYPE ${FIND_BUILD_TYPE}")

IF(${FIND_BUILD_TYPE} EQUAL -1)
	MESSAGE(FATAL_ERROR "Invalid build type.")
ENDIF()
IF(${FIND_LIBRARY_TYPE} EQUAL -1)
	MESSAGE(FATAL_ERROR "Invalid library type.")
ENDIF()

# Edit project name and set variables

SET(PROJECT_NAME_OLD ${PROJECT_NAME})
SET(${PROJECT_NAME_OLD}_NAME ${PROJECT_NAME})

# Version
IF(NOT DEFINED ${PROJECT_NAME}_VERSION)
	MESSAGE(FATAL_ERROR "Version not set.")
ENDIF()
SET(VERSION ${${PROJECT_NAME}_VERSION})
SET(PROJECT_NAME ${PROJECT_NAME}_${VERSION})
SET(${PROJECT_NAME}_VERSION ${VERSION})

# Library type

IF("${LIBRARY_TYPE}" STREQUAL Shared)
	SET(PROJECT_NAME ${PROJECT_NAME}_so)
	SET(SHARED True)
	SET(STATIC False)
ELSE()
	SET(STATIC True)
	SET(SHARED False)
ENDIF()

IF("${CMAKE_BUILD_TYPE}" STREQUAL Debug)
	SET(PROJECT_NAME ${PROJECT_NAME}_db)
	SET(DEBUG TRUE)
ENDIF()

MESSAGE(STATUS ${BoldBlue}${PROJECT_NAME}${ColourReset})


